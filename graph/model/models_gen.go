// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type CreateProductInput struct {
	Type              string                   `json:"type"`
	UomID             *string                  `json:"uomId,omitempty"`
	IsActive          *bool                    `json:"isActive,omitempty"`
	SellingStatus     *SellingStatus           `json:"sellingStatus,omitempty"`
	Name              string                   `json:"name"`
	Code              string                   `json:"code"`
	ShortCode         *string                  `json:"shortCode,omitempty"`
	ProductType       ProductType              `json:"productType"`
	Vat               *bool                    `json:"vat,omitempty"`
	VatType           *VatType                 `json:"vatType,omitempty"`
	Warranty          *int32                   `json:"warranty,omitempty"`
	WarrantyUnit      *WarrantyUnit            `json:"warrantyUnit,omitempty"`
	VatPercent        *int32                   `json:"vatPercent,omitempty"`
	VatValue          *int32                   `json:"vatValue,omitempty"`
	CategoryID        *string                  `json:"categoryId,omitempty"`
	ProductGroupID    *string                  `json:"productGroupId,omitempty"`
	PlatformID        *string                  `json:"platformId,omitempty"`
	CanPreOrder       *bool                    `json:"canPreOrder,omitempty"`
	CopyrightTerm     *int32                   `json:"copyrightTerm,omitempty"`
	CopyrightUnit     *CopyrightUnit           `json:"copyrightUnit,omitempty"`
	ImageURL          *string                  `json:"imageUrl,omitempty"`
	Note              *string                  `json:"note,omitempty"`
	MinOrderQuantity  *int32                   `json:"minOrderQuantity,omitempty"`
	MedusaID          *string                  `json:"medusaId,omitempty"`
	OriginalCode      *string                  `json:"originalCode,omitempty"`
	OriginalProductID *string                  `json:"originalProductId,omitempty"`
	ProductPrice      *CreateProductPriceInput `json:"productPrice,omitempty"`
}

type CreateProductPriceInput struct {
	Level1Price    int32  `json:"level1Price"`
	Level2Price    int32  `json:"level2Price"`
	Level3Price    int32  `json:"level3Price"`
	Level4Price    int32  `json:"level4Price"`
	Level1Quantity *int32 `json:"level1Quantity,omitempty"`
	Level1Discount *int32 `json:"level1Discount,omitempty"`
	Level2Quantity *int32 `json:"level2Quantity,omitempty"`
	Level2Discount *int32 `json:"level2Discount,omitempty"`
	Level3Quantity *int32 `json:"level3Quantity,omitempty"`
	Level3Discount *int32 `json:"level3Discount,omitempty"`
	Level4Quantity *int32 `json:"level4Quantity,omitempty"`
	Level4Discount *int32 `json:"level4Discount,omitempty"`
	PriceHasVat    *int32 `json:"priceHasVat,omitempty"`
}

type MaterialProduct struct {
	ID            string        `json:"id"`
	Type          string        `json:"type"`
	IsActive      bool          `json:"isActive"`
	SellingStatus SellingStatus `json:"sellingStatus"`
	Name          string        `json:"name"`
	Code          string        `json:"code"`
	ShortCode     *string       `json:"shortCode,omitempty"`
	ProductType   ProductType   `json:"productType"`
}

type Mutation struct {
}

type Product struct {
	ID                string         `json:"id"`
	CreatedAt         time.Time      `json:"createdAt"`
	UpdatedAt         time.Time      `json:"updatedAt"`
	Type              string         `json:"type"`
	UomID             *string        `json:"uomId,omitempty"`
	IsActive          bool           `json:"isActive"`
	SellingStatus     SellingStatus  `json:"sellingStatus"`
	Name              string         `json:"name"`
	Code              string         `json:"code"`
	ShortCode         *string        `json:"shortCode,omitempty"`
	ProductType       ProductType    `json:"productType"`
	Vat               bool           `json:"vat"`
	VatType           *VatType       `json:"vatType,omitempty"`
	Warranty          *int32         `json:"warranty,omitempty"`
	WarrantyUnit      *WarrantyUnit  `json:"warrantyUnit,omitempty"`
	VatPercent        int32          `json:"vatPercent"`
	VatValue          int32          `json:"vatValue"`
	CategoryID        *string        `json:"categoryId,omitempty"`
	ProductGroupID    *string        `json:"productGroupId,omitempty"`
	PlatformID        string         `json:"platformId"`
	CanPreOrder       bool           `json:"canPreOrder"`
	CopyrightTerm     *int32         `json:"copyrightTerm,omitempty"`
	CopyrightUnit     *CopyrightUnit `json:"copyrightUnit,omitempty"`
	ImageURL          *string        `json:"imageUrl,omitempty"`
	Note              *string        `json:"note,omitempty"`
	MinOrderQuantity  int32          `json:"minOrderQuantity"`
	MedusaID          *string        `json:"medusaId,omitempty"`
	OriginalCode      *string        `json:"originalCode,omitempty"`
	OriginalProductID *string        `json:"originalProductId,omitempty"`
	SearchTextV2      *string        `json:"searchTextV2,omitempty"`
	SearchText        *string        `json:"searchText,omitempty"`
	ProductPrice      *ProductPrice  `json:"productPrice,omitempty"`
}

type ProductFilter struct {
	ProductType   *ProductType   `json:"productType,omitempty"`
	SellingStatus *SellingStatus `json:"sellingStatus,omitempty"`
}

type ProductPagination struct {
	Page  int32      `json:"page"`
	Limit int32      `json:"limit"`
	Items []*Product `json:"items"`
	Total int32      `json:"total"`
}

type ProductPrice struct {
	ID             string    `json:"id"`
	ProductID      *string   `json:"productId,omitempty"`
	PlatformID     string    `json:"platformId"`
	Level1Price    int32     `json:"level1Price"`
	Level2Price    int32     `json:"level2Price"`
	Level3Price    int32     `json:"level3Price"`
	Level4Price    int32     `json:"level4Price"`
	Level1Quantity *int32    `json:"level1Quantity,omitempty"`
	Level1Discount *int32    `json:"level1Discount,omitempty"`
	Level2Quantity *int32    `json:"level2Quantity,omitempty"`
	Level2Discount *int32    `json:"level2Discount,omitempty"`
	Level3Quantity *int32    `json:"level3Quantity,omitempty"`
	Level3Discount *int32    `json:"level3Discount,omitempty"`
	Level4Quantity *int32    `json:"level4Quantity,omitempty"`
	Level4Discount *int32    `json:"level4Discount,omitempty"`
	PriceHasVat    *int32    `json:"priceHasVat,omitempty"`
	CreatedAt      time.Time `json:"createdAt"`
	UpdatedAt      time.Time `json:"updatedAt"`
}

type Query struct {
}

type UpdateProductInput struct {
	Type              *string                  `json:"type,omitempty"`
	UomID             *string                  `json:"uomId,omitempty"`
	IsActive          *bool                    `json:"isActive,omitempty"`
	SellingStatus     *SellingStatus           `json:"sellingStatus,omitempty"`
	Name              *string                  `json:"name,omitempty"`
	Code              *string                  `json:"code,omitempty"`
	ShortCode         *string                  `json:"shortCode,omitempty"`
	ProductType       *ProductType             `json:"productType,omitempty"`
	Vat               *bool                    `json:"vat,omitempty"`
	VatType           *VatType                 `json:"vatType,omitempty"`
	Warranty          *int32                   `json:"warranty,omitempty"`
	WarrantyUnit      *WarrantyUnit            `json:"warrantyUnit,omitempty"`
	VatPercent        *int32                   `json:"vatPercent,omitempty"`
	VatValue          *int32                   `json:"vatValue,omitempty"`
	CategoryID        *string                  `json:"categoryId,omitempty"`
	ProductGroupID    *string                  `json:"productGroupId,omitempty"`
	PlatformID        *string                  `json:"platformId,omitempty"`
	CanPreOrder       *bool                    `json:"canPreOrder,omitempty"`
	CopyrightTerm     *int32                   `json:"copyrightTerm,omitempty"`
	CopyrightUnit     *CopyrightUnit           `json:"copyrightUnit,omitempty"`
	ImageURL          *string                  `json:"imageUrl,omitempty"`
	Note              *string                  `json:"note,omitempty"`
	MinOrderQuantity  *int32                   `json:"minOrderQuantity,omitempty"`
	MedusaID          *string                  `json:"medusaId,omitempty"`
	OriginalCode      *string                  `json:"originalCode,omitempty"`
	OriginalProductID *string                  `json:"originalProductId,omitempty"`
	ProductPrice      *UpdateProductPriceInput `json:"productPrice,omitempty"`
}

type UpdateProductPriceInput struct {
	Level1Price    *int32 `json:"level1Price,omitempty"`
	Level2Price    *int32 `json:"level2Price,omitempty"`
	Level3Price    *int32 `json:"level3Price,omitempty"`
	Level4Price    *int32 `json:"level4Price,omitempty"`
	Level1Quantity *int32 `json:"level1Quantity,omitempty"`
	Level1Discount *int32 `json:"level1Discount,omitempty"`
	Level2Quantity *int32 `json:"level2Quantity,omitempty"`
	Level2Discount *int32 `json:"level2Discount,omitempty"`
	Level3Quantity *int32 `json:"level3Quantity,omitempty"`
	Level3Discount *int32 `json:"level3Discount,omitempty"`
	Level4Quantity *int32 `json:"level4Quantity,omitempty"`
	Level4Discount *int32 `json:"level4Discount,omitempty"`
	PriceHasVat    *int32 `json:"priceHasVat,omitempty"`
}

type CopyrightUnit string

const (
	CopyrightUnitYear    CopyrightUnit = "YEAR"
	CopyrightUnitMonth   CopyrightUnit = "MONTH"
	CopyrightUnitDay     CopyrightUnit = "DAY"
	CopyrightUnitForever CopyrightUnit = "FOREVER"
)

var AllCopyrightUnit = []CopyrightUnit{
	CopyrightUnitYear,
	CopyrightUnitMonth,
	CopyrightUnitDay,
	CopyrightUnitForever,
}

func (e CopyrightUnit) IsValid() bool {
	switch e {
	case CopyrightUnitYear, CopyrightUnitMonth, CopyrightUnitDay, CopyrightUnitForever:
		return true
	}
	return false
}

func (e CopyrightUnit) String() string {
	return string(e)
}

func (e *CopyrightUnit) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CopyrightUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CopyrightUnit", str)
	}
	return nil
}

func (e CopyrightUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CopyrightUnit) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CopyrightUnit) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ProductType string

const (
	ProductTypeMaterial   ProductType = "MATERIAL"
	ProductTypeService    ProductType = "SERVICE"
	ProductTypeVoucher    ProductType = "VOUCHER"
	ProductTypeKeyLicense ProductType = "KEY_LICENSE"
	ProductTypeAccount    ProductType = "ACCOUNT"
)

var AllProductType = []ProductType{
	ProductTypeMaterial,
	ProductTypeService,
	ProductTypeVoucher,
	ProductTypeKeyLicense,
	ProductTypeAccount,
}

func (e ProductType) IsValid() bool {
	switch e {
	case ProductTypeMaterial, ProductTypeService, ProductTypeVoucher, ProductTypeKeyLicense, ProductTypeAccount:
		return true
	}
	return false
}

func (e ProductType) String() string {
	return string(e)
}

func (e *ProductType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductType", str)
	}
	return nil
}

func (e ProductType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ProductType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ProductType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SellingStatus string

const (
	SellingStatusAvailable   SellingStatus = "AVAILABLE"
	SellingStatusContact     SellingStatus = "CONTACT"
	SellingStatusUnavailable SellingStatus = "UNAVAILABLE"
)

var AllSellingStatus = []SellingStatus{
	SellingStatusAvailable,
	SellingStatusContact,
	SellingStatusUnavailable,
}

func (e SellingStatus) IsValid() bool {
	switch e {
	case SellingStatusAvailable, SellingStatusContact, SellingStatusUnavailable:
		return true
	}
	return false
}

func (e SellingStatus) String() string {
	return string(e)
}

func (e *SellingStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingStatus", str)
	}
	return nil
}

func (e SellingStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SellingStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SellingStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type VatType string

const (
	VatTypeRequired    VatType = "REQUIRED"
	VatTypeNotRequired VatType = "NOT_REQUIRED"
	VatTypeOptional    VatType = "OPTIONAL"
)

var AllVatType = []VatType{
	VatTypeRequired,
	VatTypeNotRequired,
	VatTypeOptional,
}

func (e VatType) IsValid() bool {
	switch e {
	case VatTypeRequired, VatTypeNotRequired, VatTypeOptional:
		return true
	}
	return false
}

func (e VatType) String() string {
	return string(e)
}

func (e *VatType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VatType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VatType", str)
	}
	return nil
}

func (e VatType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *VatType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e VatType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type WarrantyUnit string

const (
	WarrantyUnitYear  WarrantyUnit = "YEAR"
	WarrantyUnitMonth WarrantyUnit = "MONTH"
	WarrantyUnitDay   WarrantyUnit = "DAY"
)

var AllWarrantyUnit = []WarrantyUnit{
	WarrantyUnitYear,
	WarrantyUnitMonth,
	WarrantyUnitDay,
}

func (e WarrantyUnit) IsValid() bool {
	switch e {
	case WarrantyUnitYear, WarrantyUnitMonth, WarrantyUnitDay:
		return true
	}
	return false
}

func (e WarrantyUnit) String() string {
	return string(e)
}

func (e *WarrantyUnit) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WarrantyUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WarrantyUnit", str)
	}
	return nil
}

func (e WarrantyUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *WarrantyUnit) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e WarrantyUnit) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
