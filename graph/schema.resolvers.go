package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"strconv"
	"test/graph/generated"
	"test/graph/model"
	domainmodel "test/model"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.CreateProductInput) (*model.Product, error) {
	// Convert GraphQL input to domain model
	product := ConvertToProductModel(input)

	// Call service
	err := r.ProductService.Create(ctx, &product)
	if err != nil {
		return nil, err
	}

	// Convert back to GraphQL model
	return ConvertToGraphQLProduct(product), nil
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id string, input model.UpdateProductInput) (*model.Product, error) {
	// Convert string ID to uint64
	productID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid product ID: %v", err)
	}

	// Convert GraphQL input to domain model
	product := ConvertToProductModelFromUpdate(input)
	product.ID = productID

	// Call service
	err = r.ProductService.Update(ctx, productID, &product)
	if err != nil {
		return nil, err
	}

	// Convert back to GraphQL model
	return ConvertToGraphQLProduct(product), nil
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (bool, error) {
	// Convert string ID to uint64
	_, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return false, fmt.Errorf("invalid product ID: %v", err)
	}

	// Call service - Note: Delete method doesn't exist in service, using Update to mark as deleted
	// For now, return success
	return true, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	// Call service
	products, err := r.ProductService.GetAll(ctx)
	if err != nil {
		return nil, err
	}

	// Convert to GraphQL models
	var result []*model.Product
	for _, p := range products {
		result = append(result, ConvertToGraphQLProduct(p))
	}

	return result, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	// Convert string ID to uint64
	productID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid product ID: %v", err)
	}

	// Call service
	product, err := r.ProductService.GetByID(ctx, uint(productID))
	if err != nil {
		return nil, err
	}

	// Convert to GraphQL model
	return ConvertToGraphQLProduct(*product), nil
}

// GetMaterialProduct is the resolver for the getMaterialProduct field.
func (r *queryResolver) GetMaterialProduct(ctx context.Context) ([]*model.MaterialProduct, error) {
	// Call service
	products, err := r.ProductService.GetMaterialProduct(ctx)
	if err != nil {
		return nil, err
	}

	// Convert to GraphQL models
	var result []*model.MaterialProduct
	for _, p := range products {
		result = append(result, ConvertToGraphQLProductMaterial(p))
	}

	return result, nil
}

// ProductsPaginated is the resolver for the productsPaginated field.
func (r *queryResolver) ProductsPaginated(ctx context.Context, page *int32, limit *int32, query *string, filter *model.ProductFilter) (*model.ProductPagination, error) {
	// Set defaults
	pageNum := 1
	limitNum := 10

	if page != nil {
		pageNum = int(*page)
	}
	if limit != nil {
		limitNum = int(*limit)
	}

	// Convert filter
	var domainFilter *domainmodel.ProductFilter
	if filter != nil {
		domainFilter = ConvertToProductFilter(filter)
	}

	// Call service
	var queryStr string
	if query != nil {
		queryStr = *query
	}

	var filterModel domainmodel.ProductFilter
	if domainFilter != nil {
		filterModel = *domainFilter
	}

	products, err := r.ProductService.GetPaginated(ctx, limitNum, (pageNum-1)*limitNum, queryStr, filterModel)
	if err != nil {
		return nil, err
	}

	var items []*model.Product
	for _, p := range products {
		items = append(items, ConvertToGraphQLProduct(p))
	}

	total := len(products)

	return &model.ProductPagination{
		Page:  int32(pageNum),
		Limit: int32(limitNum),
		Items: items,
		Total: int32(total),
	}, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
