# GraphQL schema for Product Management
# https://gqlgen.com/getting-started/

scalar Time

enum ProductType {
  MATERIAL
  SERVICE
  VOUCHER
  KEY_LICENSE
  ACCOUNT
}

enum SellingStatus {
  AVAILABLE
  CONTACT
  UNAVAILABLE
}

enum VatType {
  REQUIRED
  NOT_REQUIRED
  OPTIONAL
}

enum WarrantyUnit {
  YEAR
  MONTH
  DAY
}

enum CopyrightUnit {
  YEAR
  MONTH
  DAY
  FOREVER
}

type ProductPrice {
  id: ID!
  productId: ID
  platformId: ID!
  level1Price: Int!
  level2Price: Int!
  level3Price: Int!
  level4Price: Int!
  level1Quantity: Int
  level1Discount: Int
  level2Quantity: Int
  level2Discount: Int
  level3Quantity: Int
  level3Discount: Int
  level4Quantity: Int
  level4Discount: Int
  priceHasVat: Int
  createdAt: Time!
  updatedAt: Time!
}

type Product {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  type: String!
  uomId: ID
  isActive: Boolean!
  sellingStatus: SellingStatus!
  name: String!
  code: String!
  shortCode: String
  productType: ProductType!
  vat: Boolean!
  vatType: VatType
  warranty: Int
  warrantyUnit: WarrantyUnit
  vatPercent: Int!
  vatValue: Int!
  categoryId: ID
  productGroupId: ID
  platformId: ID!
  canPreOrder: Boolean!
  copyrightTerm: Int
  copyrightUnit: CopyrightUnit
  imageUrl: String
  note: String
  minOrderQuantity: Int!
  medusaId: String
  originalCode: String
  originalProductId: ID
  searchTextV2: String
  searchText: String
  productPrice: ProductPrice
}

type ProductConnection {
  page: Int!
  limit: Int!
  items: [Product!]!
  total: Int!
}

input ProductFilter {
  productType: ProductType
  sellingStatus: SellingStatus
  isActive: Boolean
  categoryId: ID
  productGroupId: ID
  platformId: ID
  canPreOrder: Boolean
  vat: Boolean
}

input CreateProductInput {
  type: String!
  uomId: ID
  isActive: Boolean = true
  sellingStatus: SellingStatus = AVAILABLE
  name: String!
  code: String!
  shortCode: String
  productType: ProductType!
  vat: Boolean = false
  vatType: VatType
  warranty: Int
  warrantyUnit: WarrantyUnit
  vatPercent: Int = 0
  vatValue: Int = 0
  categoryId: ID
  productGroupId: ID
  platformId: ID = 1
  canPreOrder: Boolean = true
  copyrightTerm: Int
  copyrightUnit: CopyrightUnit
  imageUrl: String
  note: String
  minOrderQuantity: Int = 1
  medusaId: String
  originalCode: String
  originalProductId: ID
  productPrice: CreateProductPriceInput
}

input CreateProductPriceInput {
  level1Price: Int!
  level2Price: Int!
  level3Price: Int!
  level4Price: Int!
  level1Quantity: Int
  level1Discount: Int
  level2Quantity: Int
  level2Discount: Int
  level3Quantity: Int
  level3Discount: Int
  level4Quantity: Int
  level4Discount: Int
  priceHasVat: Int
}

input UpdateProductInput {
  type: String
  uomId: ID
  isActive: Boolean
  sellingStatus: SellingStatus
  name: String
  code: String
  shortCode: String
  productType: ProductType
  vat: Boolean
  vatType: VatType
  warranty: Int
  warrantyUnit: WarrantyUnit
  vatPercent: Int
  vatValue: Int
  categoryId: ID
  productGroupId: ID
  platformId: ID
  canPreOrder: Boolean
  copyrightTerm: Int
  copyrightUnit: CopyrightUnit
  imageUrl: String
  note: String
  minOrderQuantity: Int
  medusaId: String
  originalCode: String
  originalProductId: ID
  productPrice: UpdateProductPriceInput
}

input UpdateProductPriceInput {
  level1Price: Int
  level2Price: Int
  level3Price: Int
  level4Price: Int
  level1Quantity: Int
  level1Discount: Int
  level2Quantity: Int
  level2Discount: Int
  level3Quantity: Int
  level3Discount: Int
  level4Quantity: Int
  level4Discount: Int
  priceHasVat: Int
}

type Query {
  products: [Product!]!
  product(id: ID!): Product
  productsPaginated(
    page: Int = 1
    limit: Int = 10
    query: String
    filter: ProductFilter
  ): ProductConnection!
}

type Mutation {
  createProduct(input: CreateProductInput!): Product!
  updateProduct(id: ID!, input: UpdateProductInput!): Product!
  deleteProduct(id: ID!): Boolean!
}
