package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"test/graphql_service/models"
)

// ID is the resolver for the id field.
func (r *materialProductResolver) ID(ctx context.Context, obj *models.MaterialProduct) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input models.CreateProductInput) (*models.Product, error) {
	return r.ProductHTTPClient.CreateProduct(ctx, input)
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id string, input models.UpdateProductInput) (*models.Product, error) {
	return r.ProductHTTPClient.UpdateProduct(ctx, id, input)
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (bool, error) {
	// TODO: Implement delete via HTTP API
	// For now, return success
	return true, nil
}

// ID is the resolver for the id field.
func (r *productResolver) ID(ctx context.Context, obj *models.Product) (string, error) {
	return fmt.Sprintf("%d", obj.ID), nil
}

// CategoryID is the resolver for the categoryId field.
func (r *productResolver) CategoryID(ctx context.Context, obj *models.Product) (*string, error) {
	if obj.CategoryID == nil {
		return nil, nil
	}
	result := fmt.Sprintf("%d", *obj.CategoryID)
	return &result, nil
}

// ProductGroupID is the resolver for the productGroupId field.
func (r *productResolver) ProductGroupID(ctx context.Context, obj *models.Product) (*string, error) {
	if obj.ProductGroupID == nil {
		return nil, nil
	}
	result := fmt.Sprintf("%d", *obj.ProductGroupID)
	return &result, nil
}

// PlatformID is the resolver for the platformId field.
func (r *productResolver) PlatformID(ctx context.Context, obj *models.Product) (string, error) {
	return fmt.Sprintf("%d", obj.PlatformID), nil
}

// OriginalProductID is the resolver for the originalProductId field.
func (r *productResolver) OriginalProductID(ctx context.Context, obj *models.Product) (*string, error) {
	if obj.OriginalProductID == nil {
		return nil, nil
	}
	result := fmt.Sprintf("%d", *obj.OriginalProductID)
	return &result, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*models.Product, error) {
	products, err := r.ProductHTTPClient.GetAllProducts(ctx)
	if err != nil {
		return nil, err
	}

	// Convert to pointers
	var result []*models.Product
	for i := range products {
		result = append(result, &products[i])
	}

	return result, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*models.Product, error) {
	fmt.Printf("GraphQL Product resolver called with id: %s\n", id)
	
	product, err := r.ProductHTTPClient.GetProductByID(ctx, id)
	if err != nil {
		fmt.Printf("Error getting product: %v\n", err)
		return nil, err
	}
	
	fmt.Printf("Product returned: %+v\n", product)
	return product, nil
}

// GetMaterialProduct is the resolver for the getMaterialProduct field.
func (r *queryResolver) GetMaterialProduct(ctx context.Context) ([]*models.MaterialProduct, error) {
	// Get all products and filter for materials
	products, err := r.ProductHTTPClient.GetAllProducts(ctx)
	if err != nil {
		return nil, err
	}

	var materialProducts []*models.MaterialProduct
	for _, product := range products {
		// Filter for material products (you can adjust this logic)
		if product.ProductType == "MATERIAL" {
			materialProduct := &models.MaterialProduct{
				ID:          product.ID,
				Name:        product.Name,
				Description: product.Code, // Use code as description
				Category:    product.ProductType,
				CreatedAt:   product.CreatedAt,
				UpdatedAt:   product.UpdatedAt,
			}
			materialProducts = append(materialProducts, materialProduct)
		}
	}

	return materialProducts, nil
}

// ProductsPaginated is the resolver for the productsPaginated field.
func (r *queryResolver) ProductsPaginated(ctx context.Context, page *int, limit *int, query *string, filter *models.ProductFilter) (*models.ProductPagination, error) {
	// Set default values
	pageValue := 1
	if page != nil {
		pageValue = *page
	}

	limitValue := 10
	if limit != nil {
		limitValue = *limit
	}

	queryValue := ""
	if query != nil {
		queryValue = *query
	}

	filterValue := models.ProductFilter{}
	if filter != nil {
		filterValue = *filter
	}

	return r.ProductHTTPClient.GetPaginatedProducts(ctx, pageValue, limitValue, queryValue, filterValue)
}

// CategoryID is the resolver for the categoryId field.
func (r *createProductInputResolver) CategoryID(ctx context.Context, obj *models.CreateProductInput, data *string) error {
	panic(fmt.Errorf("not implemented: CategoryID - categoryId"))
}

// ProductGroupID is the resolver for the productGroupId field.
func (r *createProductInputResolver) ProductGroupID(ctx context.Context, obj *models.CreateProductInput, data *string) error {
	panic(fmt.Errorf("not implemented: ProductGroupID - productGroupId"))
}

// PlatformID is the resolver for the platformId field.
func (r *createProductInputResolver) PlatformID(ctx context.Context, obj *models.CreateProductInput, data string) error {
	panic(fmt.Errorf("not implemented: PlatformID - platformId"))
}

// OriginalProductID is the resolver for the originalProductId field.
func (r *createProductInputResolver) OriginalProductID(ctx context.Context, obj *models.CreateProductInput, data *string) error {
	panic(fmt.Errorf("not implemented: OriginalProductID - originalProductId"))
}

// CategoryID is the resolver for the categoryId field.
func (r *updateProductInputResolver) CategoryID(ctx context.Context, obj *models.UpdateProductInput, data *string) error {
	panic(fmt.Errorf("not implemented: CategoryID - categoryId"))
}

// ProductGroupID is the resolver for the productGroupId field.
func (r *updateProductInputResolver) ProductGroupID(ctx context.Context, obj *models.UpdateProductInput, data *string) error {
	panic(fmt.Errorf("not implemented: ProductGroupID - productGroupId"))
}

// PlatformID is the resolver for the platformId field.
func (r *updateProductInputResolver) PlatformID(ctx context.Context, obj *models.UpdateProductInput, data *string) error {
	panic(fmt.Errorf("not implemented: PlatformID - platformId"))
}

// OriginalProductID is the resolver for the originalProductId field.
func (r *updateProductInputResolver) OriginalProductID(ctx context.Context, obj *models.UpdateProductInput, data *string) error {
	panic(fmt.Errorf("not implemented: OriginalProductID - originalProductId"))
}

// MaterialProduct returns MaterialProductResolver implementation.
func (r *Resolver) MaterialProduct() MaterialProductResolver { return &materialProductResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Product returns ProductResolver implementation.
func (r *Resolver) Product() ProductResolver { return &productResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// CreateProductInput returns CreateProductInputResolver implementation.
func (r *Resolver) CreateProductInput() CreateProductInputResolver {
	return &createProductInputResolver{r}
}

// UpdateProductInput returns UpdateProductInputResolver implementation.
func (r *Resolver) UpdateProductInput() UpdateProductInputResolver {
	return &updateProductInputResolver{r}
}

type materialProductResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type productResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type createProductInputResolver struct{ *Resolver }
type updateProductInputResolver struct{ *Resolver }
