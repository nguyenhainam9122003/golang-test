// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type Product interface {
	IsProduct()
	GetID() string
	GetCreatedAt() time.Time
	GetUpdatedAt() time.Time
	GetType() string
	GetUomID() *string
	GetIsActive() bool
	GetSellingStatus() SellingStatus
	GetName() string
	GetCode() string
	GetProductType() ProductType
	GetVat() bool
	GetVatType() *VatType
	GetWarranty() *int
	GetWarrantyUnit() *WarrantyUnit
	GetVatPercent() int
	GetVatValue() int
	GetCategoryID() *string
	GetProductGroupID() *string
	GetPlatformID() string
	GetCanPreOrder() bool
	GetCopyrightTerm() *int
	GetCopyrightUnit() *CopyrightUnit
	GetImageURL() *string
	GetNote() *string
	GetMinOrderQuantity() int
	GetMedusaID() *string
	GetOriginalProductID() *string
	GetSearchTextV2() *string
	GetSearchText() *string
	GetProductPrice() *ProductPrice
}

type CreateProductInput struct {
	Type              string                   `json:"type"`
	UomID             *string                  `json:"uomId,omitempty"`
	IsActive          *bool                    `json:"isActive,omitempty"`
	SellingStatus     *SellingStatus           `json:"sellingStatus,omitempty"`
	Name              string                   `json:"name"`
	Code              string                   `json:"code"`
	ShortCode         *string                  `json:"shortCode,omitempty"`
	ProductType       ProductType              `json:"productType"`
	Vat               *bool                    `json:"vat,omitempty"`
	VatType           *VatType                 `json:"vatType,omitempty"`
	Warranty          *int                     `json:"warranty,omitempty"`
	WarrantyUnit      *WarrantyUnit            `json:"warrantyUnit,omitempty"`
	VatPercent        *int                     `json:"vatPercent,omitempty"`
	VatValue          *int                     `json:"vatValue,omitempty"`
	CategoryID        *string                  `json:"categoryId,omitempty"`
	ProductGroupID    *string                  `json:"productGroupId,omitempty"`
	PlatformID        *string                  `json:"platformId,omitempty"`
	CanPreOrder       *bool                    `json:"canPreOrder,omitempty"`
	CopyrightTerm     *int                     `json:"copyrightTerm,omitempty"`
	CopyrightUnit     *CopyrightUnit           `json:"copyrightUnit,omitempty"`
	ImageURL          *string                  `json:"imageUrl,omitempty"`
	Note              *string                  `json:"note,omitempty"`
	MinOrderQuantity  *int                     `json:"minOrderQuantity,omitempty"`
	MedusaID          *string                  `json:"medusaId,omitempty"`
	OriginalCode      *string                  `json:"originalCode,omitempty"`
	OriginalProductID *string                  `json:"originalProductId,omitempty"`
	ProductPrice      *CreateProductPriceInput `json:"productPrice,omitempty"`
}

type CreateProductPriceInput struct {
	Level1Price    int  `json:"level1Price"`
	Level2Price    int  `json:"level2Price"`
	Level3Price    int  `json:"level3Price"`
	Level4Price    int  `json:"level4Price"`
	Level1Quantity *int `json:"level1Quantity,omitempty"`
	Level1Discount *int `json:"level1Discount,omitempty"`
	Level2Quantity *int `json:"level2Quantity,omitempty"`
	Level2Discount *int `json:"level2Discount,omitempty"`
	Level3Quantity *int `json:"level3Quantity,omitempty"`
	Level3Discount *int `json:"level3Discount,omitempty"`
	Level4Quantity *int `json:"level4Quantity,omitempty"`
	Level4Discount *int `json:"level4Discount,omitempty"`
	PriceHasVat    *int `json:"priceHasVat,omitempty"`
}

type DigitalProduct struct {
	OriginalCode      *string        `json:"originalCode,omitempty"`
	ID                string         `json:"id"`
	CreatedAt         time.Time      `json:"createdAt"`
	UpdatedAt         time.Time      `json:"updatedAt"`
	Type              string         `json:"type"`
	UomID             *string        `json:"uomId,omitempty"`
	IsActive          bool           `json:"isActive"`
	SellingStatus     SellingStatus  `json:"sellingStatus"`
	Name              string         `json:"name"`
	Code              string         `json:"code"`
	ProductType       ProductType    `json:"productType"`
	Vat               bool           `json:"vat"`
	VatType           *VatType       `json:"vatType,omitempty"`
	Warranty          *int           `json:"warranty,omitempty"`
	WarrantyUnit      *WarrantyUnit  `json:"warrantyUnit,omitempty"`
	VatPercent        int            `json:"vatPercent"`
	VatValue          int            `json:"vatValue"`
	CategoryID        *string        `json:"categoryId,omitempty"`
	ProductGroupID    *string        `json:"productGroupId,omitempty"`
	PlatformID        string         `json:"platformId"`
	CanPreOrder       bool           `json:"canPreOrder"`
	CopyrightTerm     *int           `json:"copyrightTerm,omitempty"`
	CopyrightUnit     *CopyrightUnit `json:"copyrightUnit,omitempty"`
	ImageURL          *string        `json:"imageUrl,omitempty"`
	Note              *string        `json:"note,omitempty"`
	MinOrderQuantity  int            `json:"minOrderQuantity"`
	MedusaID          *string        `json:"medusaId,omitempty"`
	OriginalProductID *string        `json:"originalProductId,omitempty"`
	SearchTextV2      *string        `json:"searchTextV2,omitempty"`
	SearchText        *string        `json:"searchText,omitempty"`
	ProductPrice      *ProductPrice  `json:"productPrice,omitempty"`
}

func (DigitalProduct) IsProduct()                            {}
func (this DigitalProduct) GetID() string                    { return this.ID }
func (this DigitalProduct) GetCreatedAt() time.Time          { return this.CreatedAt }
func (this DigitalProduct) GetUpdatedAt() time.Time          { return this.UpdatedAt }
func (this DigitalProduct) GetType() string                  { return this.Type }
func (this DigitalProduct) GetUomID() *string                { return this.UomID }
func (this DigitalProduct) GetIsActive() bool                { return this.IsActive }
func (this DigitalProduct) GetSellingStatus() SellingStatus  { return this.SellingStatus }
func (this DigitalProduct) GetName() string                  { return this.Name }
func (this DigitalProduct) GetCode() string                  { return this.Code }
func (this DigitalProduct) GetProductType() ProductType      { return this.ProductType }
func (this DigitalProduct) GetVat() bool                     { return this.Vat }
func (this DigitalProduct) GetVatType() *VatType             { return this.VatType }
func (this DigitalProduct) GetWarranty() *int                { return this.Warranty }
func (this DigitalProduct) GetWarrantyUnit() *WarrantyUnit   { return this.WarrantyUnit }
func (this DigitalProduct) GetVatPercent() int               { return this.VatPercent }
func (this DigitalProduct) GetVatValue() int                 { return this.VatValue }
func (this DigitalProduct) GetCategoryID() *string           { return this.CategoryID }
func (this DigitalProduct) GetProductGroupID() *string       { return this.ProductGroupID }
func (this DigitalProduct) GetPlatformID() string            { return this.PlatformID }
func (this DigitalProduct) GetCanPreOrder() bool             { return this.CanPreOrder }
func (this DigitalProduct) GetCopyrightTerm() *int           { return this.CopyrightTerm }
func (this DigitalProduct) GetCopyrightUnit() *CopyrightUnit { return this.CopyrightUnit }
func (this DigitalProduct) GetImageURL() *string             { return this.ImageURL }
func (this DigitalProduct) GetNote() *string                 { return this.Note }
func (this DigitalProduct) GetMinOrderQuantity() int         { return this.MinOrderQuantity }
func (this DigitalProduct) GetMedusaID() *string             { return this.MedusaID }
func (this DigitalProduct) GetOriginalProductID() *string    { return this.OriginalProductID }
func (this DigitalProduct) GetSearchTextV2() *string         { return this.SearchTextV2 }
func (this DigitalProduct) GetSearchText() *string           { return this.SearchText }
func (this DigitalProduct) GetProductPrice() *ProductPrice   { return this.ProductPrice }

type MaterialProduct struct {
	ShortCode         *string        `json:"shortCode,omitempty"`
	ID                string         `json:"id"`
	CreatedAt         time.Time      `json:"createdAt"`
	UpdatedAt         time.Time      `json:"updatedAt"`
	Type              string         `json:"type"`
	UomID             *string        `json:"uomId,omitempty"`
	IsActive          bool           `json:"isActive"`
	SellingStatus     SellingStatus  `json:"sellingStatus"`
	Name              string         `json:"name"`
	Code              string         `json:"code"`
	ProductType       ProductType    `json:"productType"`
	Vat               bool           `json:"vat"`
	VatType           *VatType       `json:"vatType,omitempty"`
	Warranty          *int           `json:"warranty,omitempty"`
	WarrantyUnit      *WarrantyUnit  `json:"warrantyUnit,omitempty"`
	VatPercent        int            `json:"vatPercent"`
	VatValue          int            `json:"vatValue"`
	CategoryID        *string        `json:"categoryId,omitempty"`
	ProductGroupID    *string        `json:"productGroupId,omitempty"`
	PlatformID        string         `json:"platformId"`
	CanPreOrder       bool           `json:"canPreOrder"`
	CopyrightTerm     *int           `json:"copyrightTerm,omitempty"`
	CopyrightUnit     *CopyrightUnit `json:"copyrightUnit,omitempty"`
	ImageURL          *string        `json:"imageUrl,omitempty"`
	Note              *string        `json:"note,omitempty"`
	MinOrderQuantity  int            `json:"minOrderQuantity"`
	MedusaID          *string        `json:"medusaId,omitempty"`
	OriginalProductID *string        `json:"originalProductId,omitempty"`
	SearchTextV2      *string        `json:"searchTextV2,omitempty"`
	SearchText        *string        `json:"searchText,omitempty"`
	ProductPrice      *ProductPrice  `json:"productPrice,omitempty"`
}

func (MaterialProduct) IsProduct()                            {}
func (this MaterialProduct) GetID() string                    { return this.ID }
func (this MaterialProduct) GetCreatedAt() time.Time          { return this.CreatedAt }
func (this MaterialProduct) GetUpdatedAt() time.Time          { return this.UpdatedAt }
func (this MaterialProduct) GetType() string                  { return this.Type }
func (this MaterialProduct) GetUomID() *string                { return this.UomID }
func (this MaterialProduct) GetIsActive() bool                { return this.IsActive }
func (this MaterialProduct) GetSellingStatus() SellingStatus  { return this.SellingStatus }
func (this MaterialProduct) GetName() string                  { return this.Name }
func (this MaterialProduct) GetCode() string                  { return this.Code }
func (this MaterialProduct) GetProductType() ProductType      { return this.ProductType }
func (this MaterialProduct) GetVat() bool                     { return this.Vat }
func (this MaterialProduct) GetVatType() *VatType             { return this.VatType }
func (this MaterialProduct) GetWarranty() *int                { return this.Warranty }
func (this MaterialProduct) GetWarrantyUnit() *WarrantyUnit   { return this.WarrantyUnit }
func (this MaterialProduct) GetVatPercent() int               { return this.VatPercent }
func (this MaterialProduct) GetVatValue() int                 { return this.VatValue }
func (this MaterialProduct) GetCategoryID() *string           { return this.CategoryID }
func (this MaterialProduct) GetProductGroupID() *string       { return this.ProductGroupID }
func (this MaterialProduct) GetPlatformID() string            { return this.PlatformID }
func (this MaterialProduct) GetCanPreOrder() bool             { return this.CanPreOrder }
func (this MaterialProduct) GetCopyrightTerm() *int           { return this.CopyrightTerm }
func (this MaterialProduct) GetCopyrightUnit() *CopyrightUnit { return this.CopyrightUnit }
func (this MaterialProduct) GetImageURL() *string             { return this.ImageURL }
func (this MaterialProduct) GetNote() *string                 { return this.Note }
func (this MaterialProduct) GetMinOrderQuantity() int         { return this.MinOrderQuantity }
func (this MaterialProduct) GetMedusaID() *string             { return this.MedusaID }
func (this MaterialProduct) GetOriginalProductID() *string    { return this.OriginalProductID }
func (this MaterialProduct) GetSearchTextV2() *string         { return this.SearchTextV2 }
func (this MaterialProduct) GetSearchText() *string           { return this.SearchText }
func (this MaterialProduct) GetProductPrice() *ProductPrice   { return this.ProductPrice }

type Mutation struct {
}

type ProductFilter struct {
	ProductType   *ProductType   `json:"productType,omitempty"`
	SellingStatus *SellingStatus `json:"sellingStatus,omitempty"`
}

type ProductPagination struct {
	Page  int       `json:"page"`
	Limit int       `json:"limit"`
	Items []Product `json:"items"`
	Total int       `json:"total"`
}

type ProductPrice struct {
	ID             string    `json:"id"`
	ProductID      *string   `json:"productId,omitempty"`
	PlatformID     string    `json:"platformId"`
	Level1Price    int       `json:"level1Price"`
	Level2Price    int       `json:"level2Price"`
	Level3Price    int       `json:"level3Price"`
	Level4Price    int       `json:"level4Price"`
	Level1Quantity *int      `json:"level1Quantity,omitempty"`
	Level1Discount *int      `json:"level1Discount,omitempty"`
	Level2Quantity *int      `json:"level2Quantity,omitempty"`
	Level2Discount *int      `json:"level2Discount,omitempty"`
	Level3Quantity *int      `json:"level3Quantity,omitempty"`
	Level3Discount *int      `json:"level3Discount,omitempty"`
	Level4Quantity *int      `json:"level4Quantity,omitempty"`
	Level4Discount *int      `json:"level4Discount,omitempty"`
	PriceHasVat    *int      `json:"priceHasVat,omitempty"`
	CreatedAt      time.Time `json:"createdAt"`
	UpdatedAt      time.Time `json:"updatedAt"`
}

type Query struct {
}

type UpdateProductInput struct {
	Type              *string                  `json:"type,omitempty"`
	UomID             *string                  `json:"uomId,omitempty"`
	IsActive          *bool                    `json:"isActive,omitempty"`
	SellingStatus     *SellingStatus           `json:"sellingStatus,omitempty"`
	Name              *string                  `json:"name,omitempty"`
	Code              *string                  `json:"code,omitempty"`
	ShortCode         *string                  `json:"shortCode,omitempty"`
	ProductType       *ProductType             `json:"productType,omitempty"`
	Vat               *bool                    `json:"vat,omitempty"`
	VatType           *VatType                 `json:"vatType,omitempty"`
	Warranty          *int                     `json:"warranty,omitempty"`
	WarrantyUnit      *WarrantyUnit            `json:"warrantyUnit,omitempty"`
	VatPercent        *int                     `json:"vatPercent,omitempty"`
	VatValue          *int                     `json:"vatValue,omitempty"`
	CategoryID        *string                  `json:"categoryId,omitempty"`
	ProductGroupID    *string                  `json:"productGroupId,omitempty"`
	PlatformID        *string                  `json:"platformId,omitempty"`
	CanPreOrder       *bool                    `json:"canPreOrder,omitempty"`
	CopyrightTerm     *int                     `json:"copyrightTerm,omitempty"`
	CopyrightUnit     *CopyrightUnit           `json:"copyrightUnit,omitempty"`
	ImageURL          *string                  `json:"imageUrl,omitempty"`
	Note              *string                  `json:"note,omitempty"`
	MinOrderQuantity  *int                     `json:"minOrderQuantity,omitempty"`
	MedusaID          *string                  `json:"medusaId,omitempty"`
	OriginalCode      *string                  `json:"originalCode,omitempty"`
	OriginalProductID *string                  `json:"originalProductId,omitempty"`
	ProductPrice      *UpdateProductPriceInput `json:"productPrice,omitempty"`
}

type UpdateProductPriceInput struct {
	Level1Price    *int `json:"level1Price,omitempty"`
	Level2Price    *int `json:"level2Price,omitempty"`
	Level3Price    *int `json:"level3Price,omitempty"`
	Level4Price    *int `json:"level4Price,omitempty"`
	Level1Quantity *int `json:"level1Quantity,omitempty"`
	Level1Discount *int `json:"level1Discount,omitempty"`
	Level2Quantity *int `json:"level2Quantity,omitempty"`
	Level2Discount *int `json:"level2Discount,omitempty"`
	Level3Quantity *int `json:"level3Quantity,omitempty"`
	Level3Discount *int `json:"level3Discount,omitempty"`
	Level4Quantity *int `json:"level4Quantity,omitempty"`
	Level4Discount *int `json:"level4Discount,omitempty"`
	PriceHasVat    *int `json:"priceHasVat,omitempty"`
}

type CopyrightUnit string

const (
	CopyrightUnitYear    CopyrightUnit = "YEAR"
	CopyrightUnitMonth   CopyrightUnit = "MONTH"
	CopyrightUnitDay     CopyrightUnit = "DAY"
	CopyrightUnitForever CopyrightUnit = "FOREVER"
)

var AllCopyrightUnit = []CopyrightUnit{
	CopyrightUnitYear,
	CopyrightUnitMonth,
	CopyrightUnitDay,
	CopyrightUnitForever,
}

func (e CopyrightUnit) IsValid() bool {
	switch e {
	case CopyrightUnitYear, CopyrightUnitMonth, CopyrightUnitDay, CopyrightUnitForever:
		return true
	}
	return false
}

func (e CopyrightUnit) String() string {
	return string(e)
}

func (e *CopyrightUnit) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CopyrightUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CopyrightUnit", str)
	}
	return nil
}

func (e CopyrightUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CopyrightUnit) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CopyrightUnit) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ProductType string

const (
	ProductTypeMaterial   ProductType = "MATERIAL"
	ProductTypeService    ProductType = "SERVICE"
	ProductTypeVoucher    ProductType = "VOUCHER"
	ProductTypeKeyLicense ProductType = "KEY_LICENSE"
	ProductTypeAccount    ProductType = "ACCOUNT"
)

var AllProductType = []ProductType{
	ProductTypeMaterial,
	ProductTypeService,
	ProductTypeVoucher,
	ProductTypeKeyLicense,
	ProductTypeAccount,
}

func (e ProductType) IsValid() bool {
	switch e {
	case ProductTypeMaterial, ProductTypeService, ProductTypeVoucher, ProductTypeKeyLicense, ProductTypeAccount:
		return true
	}
	return false
}

func (e ProductType) String() string {
	return string(e)
}

func (e *ProductType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductType", str)
	}
	return nil
}

func (e ProductType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ProductType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ProductType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SellingStatus string

const (
	SellingStatusAvailable   SellingStatus = "AVAILABLE"
	SellingStatusContact     SellingStatus = "CONTACT"
	SellingStatusUnavailable SellingStatus = "UNAVAILABLE"
)

var AllSellingStatus = []SellingStatus{
	SellingStatusAvailable,
	SellingStatusContact,
	SellingStatusUnavailable,
}

func (e SellingStatus) IsValid() bool {
	switch e {
	case SellingStatusAvailable, SellingStatusContact, SellingStatusUnavailable:
		return true
	}
	return false
}

func (e SellingStatus) String() string {
	return string(e)
}

func (e *SellingStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SellingStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SellingStatus", str)
	}
	return nil
}

func (e SellingStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SellingStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SellingStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type VatType string

const (
	VatTypeRequired    VatType = "REQUIRED"
	VatTypeNotRequired VatType = "NOT_REQUIRED"
	VatTypeOptional    VatType = "OPTIONAL"
)

var AllVatType = []VatType{
	VatTypeRequired,
	VatTypeNotRequired,
	VatTypeOptional,
}

func (e VatType) IsValid() bool {
	switch e {
	case VatTypeRequired, VatTypeNotRequired, VatTypeOptional:
		return true
	}
	return false
}

func (e VatType) String() string {
	return string(e)
}

func (e *VatType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VatType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VatType", str)
	}
	return nil
}

func (e VatType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *VatType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e VatType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type WarrantyUnit string

const (
	WarrantyUnitYear  WarrantyUnit = "YEAR"
	WarrantyUnitMonth WarrantyUnit = "MONTH"
	WarrantyUnitDay   WarrantyUnit = "DAY"
)

var AllWarrantyUnit = []WarrantyUnit{
	WarrantyUnitYear,
	WarrantyUnitMonth,
	WarrantyUnitDay,
}

func (e WarrantyUnit) IsValid() bool {
	switch e {
	case WarrantyUnitYear, WarrantyUnitMonth, WarrantyUnitDay:
		return true
	}
	return false
}

func (e WarrantyUnit) String() string {
	return string(e)
}

func (e *WarrantyUnit) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WarrantyUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WarrantyUnit", str)
	}
	return nil
}

func (e WarrantyUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *WarrantyUnit) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e WarrantyUnit) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
